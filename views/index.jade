script(src='d3.min.js')
script(src='topojson.min.js')
div#map
style.
	#map {
		background-color: #fff;
		border: 1px solid #ccc;
	}
	.background {
		fill: none;
		pointer-events: all;
	}
	#countries, #states {
		fill: #cde;
		stroke: #fff;
		stroke-linejoin: round;
		stroke-linecap: round;
	}
	.country{
		fill: whitesmoke;
	}
	.country-border{
		fill: none;
		stroke: darkslategray;
	}
	.q0-9 { fill:rgb(247,251,255); }
	.q1-9 { fill:rgb(222,235,247); }
	.q2-9 { fill:rgb(198,219,239); }
	.q3-9 { fill:rgb(158,202,225); }
	.q4-9 { fill:rgb(107,174,214); }
	.q5-9 { fill:rgb(66,146,198); }
	.q6-9 { fill:rgb(33,113,181); }
	.q7-9 { fill:rgb(8,81,156); }
	.q8-9 { fill:rgb(8,48,107); }

script.
	document.addEventListener("DOMContentLoaded", function(event) {

		// creating map
		var w=window,
			d=document,
			e=d.documentElement,
			g=d.getElementsByTagName('body')[0],
			x=w.innerWidth||e.clientWidth||g.clientWidth,
			y=w.innerHeight||e.clientHeight||g.clientHeight;

		var m_width = x,
			width = 938,
			height = 500,
			country,
			state;

		// var fill = d3.scale.quantize()
		//    .domain([0, maxCount])
		//    .range(d3.range(9).map(function(i) { return "q" + i + "-9"; }));

		var projection = d3.geo.mercator().scale(150).translate([width / 2, height / 1.5]);

		var path = d3.geo.path()
			.projection(projection);

		var svg = d3.select("#map").append("svg")
			.attr("preserveAspectRatio", "xMidYMid")
			.attr("viewBox", "0 0 " + width + " " + height)
			.attr("width", m_width)
			.attr("height", m_width * height / width);

		svg.append("rect")
			.attr("class", "background")
			.attr("width", width)
			.attr("height", height)

		var g = svg.append("g");

		window.onresize = function() {
			var w=window,
			d=document,
			e=d.documentElement,
			g=d.getElementsByTagName('body')[0],
			x=w.innerWidth||e.clientWidth||g.clientWidth,
			y=w.innerHeight||e.clientHeight||g.clientHeight;
			console.log('resized')
			var wid = x;
			svg.attr("width", wid);
			svg.attr("height", wid * height / width);
		};

		d3.json("countries.topo.json", function(error, countries) {
			if (error) return console.error(error);
			console.log(countries)

			  // var worldFeatures = topojson.feature(countries, countries.objects.countries);
			  // console.log(worldFeatures)

			  // var countryNames = countries.objects.countries.geometries.map(function(item){
			  // 	return item.properties.name;
			  // });

			g.append("g")
				.attr("id", "countries")
				.selectAll("path")
				.data(topojson.feature(countries, countries.objects.countries).features)
				.enter()
				.append("path")
				.attr("id", function(d) { return d.id; })
				.attr("d", path)
				.on("click", country_clicked);

			  // states
			  // g.append("path")
			  //   .datum(worldFeatures)
			  //   .attr("d", path);

			  // // add state shapes and classes
			  // g.selectAll(".country")
			  //   .data(worldFeatures.features)
			  // .enter().append("path")
			  //   .attr("class", function(d) { return "country " + d.id; })
			  //   .attr("d", path);

			  // // state borders
			  // g.append("path")
			  //   .datum(topojson.mesh(countries, countries.objects.countries))
			  //   .attr("d", path)
			  //   .attr("class", "country-border");

			  //state names
			  // svg.selectAll(".state-label")
			  //   .data(topojson.feature(states, states.objects.us_states).features)
			  // 	.enter().append("text")
			  //   .attr("class", function(d) { return "state-label " + abbrevations[d.properties.name] })
			  //   .attr("transform", function(d) { return "translate(" + path.centroid(d) + ")"; })
			  //   .attr("dy", ".35em")
			  //   .text(function(d) { return d.properties.name; });
			})
	function country_clicked(d) {
		console.log(d)
	}
	})
